using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEulerApp.Problems
{
    class Problem12 : UtilityMethods, IProblem
    {
        private string _name = "Problem 12";
        private string _title = "Highly divisible triangular number";
        private string _description = "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:"
            + Environment.NewLine + Environment.NewLine
            + "        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ..."
            + Environment.NewLine + Environment.NewLine
            + "Let us list the factors of the first seven triangle numbers:"
            + Environment.NewLine + Environment.NewLine
            + "         1: 1\n"
            + "         3: 1,3\n"
            + "         6: 1,2,3,6\n"
            + "        10: 1,2,5,10\n"
            + "        15: 1,3,5,15\n"
            + "        21: 1,3,7,21\n"
            + "        28: 1,2,4,7,14,28"
            + Environment.NewLine + Environment.NewLine
            + "We can see that 28 is the first triangle number to have over five divisors."
            + Environment.NewLine + Environment.NewLine
            + "What is the value of the first triangle number to have over five hundred divisors?";
        string _requiredAnswer = "76576500";
        private BigInteger _myAnswer;

        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        public string RequiredAnswer
        {
            get { return _requiredAnswer; }
            set { _requiredAnswer = value; }
        }

        public BigInteger MyAnswer
        {
            get { return _myAnswer; }
            set { _myAnswer = value; }
        }

        public BigInteger GetAnswer()
        {
            BigInteger answer = 0;
            BigInteger i = 1;

            while (GetNumDivisors(answer) < 500)
            {
                answer += i;
                i++;
            }

            return answer;
        }
    }
}
